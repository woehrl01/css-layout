{"version":3,"sources":["webpack:///path---docs-layout-direction-671ae33e7eb485a25a40.js","webpack:///./.cache/json/docs-layout-direction.json"],"names":["webpackJsonp","531","module","exports","pathContext","frontmatter","path","title","hasPlayground","initialPlayground","redirect","html"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,aAAeC,aAAeC,KAAA,yBAAAC,MAAA,mBAAAC,eAAA,EAAAC,kBAAA,KAAAC,SAAA,MAA0HC,KAAA","file":"path---docs-layout-direction-671ae33e7eb485a25a40.js","sourcesContent":["webpackJsonp([112498088019428],{\n\n/***/ 531:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"pathContext\":{\"frontmatter\":{\"path\":\"/docs/layout-direction\",\"title\":\"Layout Direction\",\"hasPlayground\":false,\"initialPlayground\":null,\"redirect\":null},\"html\":\"<h2>Layout Direction</h2>\\n<p>Layout direction specifies the direction in which children and text\\nin a hierarchy should be laid out. Layout direction also effects what\\nedge <code class=\\\"language-text\\\">start</code> and <code class=\\\"language-text\\\">end</code> refer to. By default Yoga lays out with <code class=\\\"language-text\\\">LTR</code>\\nlayout direction. In this mode <code class=\\\"language-text\\\">start</code> refers to <code class=\\\"language-text\\\">left</code> and <code class=\\\"language-text\\\">end</code>\\nrefers to <code class=\\\"language-text\\\">right</code>. When localizing your apps for markets with RTL languages\\nyou should customize this by either by passing a direction\\nto the <code class=\\\"language-text\\\">CalculateLayout</code> call or by setting the direction on the root node.</p>\\n<p><strong>LTR (DEFAULT)</strong> Text and children and laid out from left to right. Margin and\\npadding applied the start of an element are applied on the left side.</p>\\n<p><strong>RTL</strong> Text and children and laid out from right to left. Margin and\\npadding applied the start of an element are applied on the right side.</p>\\n<p><controls prop=\\\"layoutDirection\\\"></controls></p>\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---docs-layout-direction-671ae33e7eb485a25a40.js","module.exports = {\"pathContext\":{\"frontmatter\":{\"path\":\"/docs/layout-direction\",\"title\":\"Layout Direction\",\"hasPlayground\":false,\"initialPlayground\":null,\"redirect\":null},\"html\":\"<h2>Layout Direction</h2>\\n<p>Layout direction specifies the direction in which children and text\\nin a hierarchy should be laid out. Layout direction also effects what\\nedge <code class=\\\"language-text\\\">start</code> and <code class=\\\"language-text\\\">end</code> refer to. By default Yoga lays out with <code class=\\\"language-text\\\">LTR</code>\\nlayout direction. In this mode <code class=\\\"language-text\\\">start</code> refers to <code class=\\\"language-text\\\">left</code> and <code class=\\\"language-text\\\">end</code>\\nrefers to <code class=\\\"language-text\\\">right</code>. When localizing your apps for markets with RTL languages\\nyou should customize this by either by passing a direction\\nto the <code class=\\\"language-text\\\">CalculateLayout</code> call or by setting the direction on the root node.</p>\\n<p><strong>LTR (DEFAULT)</strong> Text and children and laid out from left to right. Margin and\\npadding applied the start of an element are applied on the left side.</p>\\n<p><strong>RTL</strong> Text and children and laid out from right to left. Margin and\\npadding applied the start of an element are applied on the right side.</p>\\n<p><controls prop=\\\"layoutDirection\\\"></controls></p>\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/docs-layout-direction.json\n// module id = 531\n// module chunks = 112498088019428"],"sourceRoot":""}